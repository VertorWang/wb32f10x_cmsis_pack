/*
 * ARM Limited (ARM) is supplying this software for use with Cortex-Mprocessor based microcontroller, b
 * ut can be equally used for othersuitable processor architectures. This file can be freely distribute
 * d.Modifications to this file shall be clearly marked.THIS SOFTWARE IS PROVIDED "AS IS". NO WARRANTIE
 * S, WHETHER EXPRESS, IMPLIEDOR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OFMERCHAN
 * TABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.ARM SHALL NOT, IN ANY CIRCUMSTA
 * NCES, BE LIABLE FOR SPECIAL, INCIDENTAL, ORCONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * @file     WB32F10x.h
 * @brief    CMSIS HeaderFile
 * @version  1.2
 * @date     20. July 2022
 * @note     Generated by SVDConv V3.3.27 on Wednesday, 20.07.2022 14:38:14
 *           from File 'WB32F10x.svd',
 *           last modified on Wednesday, 20.07.2022 06:37:48
 */



/** @addtogroup 
  * @{
  */


/** @addtogroup WB32F10x
  * @{
  */


#ifndef WB32F10X_H
#define WB32F10X_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M3 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  MemoryManagement_IRQn     = -12,              /*!< -12  Memory Management, MPU mismatch, including Access Violation
                                                     and No Match                                                              */
  BusFault_IRQn             = -11,              /*!< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
                                                     related Fault                                                             */
  UsageFault_IRQn           = -10,              /*!< -10  Usage Fault, i.e. Undef Instruction, Illegal State Transition        */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  DebugMonitor_IRQn         =  -4,              /*!< -4 Debug Monitor                                                          */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* ==========================================  WB32F10x Specific Interrupt Numbers  ========================================== */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M3 Processor and Core Peripherals  =========================== */
#define __CM3_REV                 0x0200U       /*!< CM3 Core Revision                                                         */
#define __NVIC_PRIO_BITS               4        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __MPU_PRESENT                  1        /*!< MPU present                                                               */
#define __FPU_PRESENT                  0        /*!< FPU present                                                               */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm3.h"                           /*!< ARM Cortex-M3 processor and core peripherals                              */
#include "system_WB32F10x.h"                    /*!< WB32F10x System                                                           */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                            CRC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Cyclic Redundancy Check (CRC)
  */

typedef struct {                                /*!< (@ 0x40014800) CRC Structure                                              */
  __IOM uint32_t  MODE;                         /*!< (@ 0x00000000) CRC mode register                                          */
  __IOM uint32_t  SEED;                         /*!< (@ 0x00000004) CRC seed register                                          */
  
  union {
    __IM  uint32_t SUM;                         /*!< (@ 0x00000008) CRC checksum register                                      */
    __OM  uint32_t WDATA;                       /*!< (@ 0x00000008) CRC data register                                          */
  };
} CRC_Type;                                     /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                            RNG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Random Number Generator (RNG)
  */

typedef struct {                                /*!< (@ 0x4000B800) RNG Structure                                              */
  __IM  uint32_t  RAND;                         /*!< (@ 0x00000000) Random number generator register                           */
  __IOM uint32_t  STOP;                         /*!< (@ 0x00000004) RNG STOP register                                          */
  __IM  uint32_t  REC;                          /*!< (@ 0x00000008) RNG Record register                                        */
} RNG_Type;                                     /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                            PWR                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Power control (PWR)
  */

typedef struct {                                /*!< (@ 0x40010000) PWR Structure                                              */
  __IOM uint32_t  CR0;                          /*!< (@ 0x00000000) Power control register 0                                   */
  __OM  uint32_t  CR1;                          /*!< (@ 0x00000004) Control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000008) Control register 2                                         */
  __IM  uint32_t  RESERVED;
  __IM  uint32_t  SR0;                          /*!< (@ 0x00000010) Status register 0                                          */
  __IM  uint32_t  SR1;                          /*!< (@ 0x00000014) Status register 1                                          */
  __IOM uint32_t  GPREG0;                       /*!< (@ 0x00000018) General purpose register 0                                 */
  __IOM uint32_t  GPREG1;                       /*!< (@ 0x0000001C) General purpose register 1                                 */
  __IOM uint32_t  CFGR;                         /*!< (@ 0x00000020) Configuration register                                     */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  ANAKEY1;                      /*!< (@ 0x00000028) Analog enable register 1                                   */
  __IOM uint32_t  ANAKEY2;                      /*!< (@ 0x0000002C) Analog enable register 2                                   */
} PWR_Type;                                     /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                            BKP                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Backup registers (BKP)
  */

typedef struct {                                /*!< (@ 0x40015C00) BKP Structure                                              */
  __IOM uint32_t  RTCCR;                        /*!< (@ 0x00000000) RTC signal output control register                         */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000004) Tamper pin control register                                */
  __IM  uint32_t  CSR;                          /*!< (@ 0x00000008) Tamper control and status register                         */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  DR1;                          /*!< (@ 0x00000010) Backup data register                                       */
  __IOM uint32_t  DR2;                          /*!< (@ 0x00000014) Backup data register                                       */
  __IOM uint32_t  DR3;                          /*!< (@ 0x00000018) Backup data register                                       */
  __IOM uint32_t  DR4;                          /*!< (@ 0x0000001C) Backup data register                                       */
  __IOM uint32_t  DR5;                          /*!< (@ 0x00000020) Backup data register                                       */
  __IOM uint32_t  DR6;                          /*!< (@ 0x00000024) Backup data register                                       */
  __IOM uint32_t  DR7;                          /*!< (@ 0x00000028) Backup data register                                       */
  __IOM uint32_t  DR8;                          /*!< (@ 0x0000002C) Backup data register                                       */
  __IOM uint32_t  DR9;                          /*!< (@ 0x00000030) Backup data register                                       */
  __IOM uint32_t  DR10;                         /*!< (@ 0x00000034) Backup data register                                       */
  __IOM uint32_t  DR11;                         /*!< (@ 0x00000038) Backup data register                                       */
  __IOM uint32_t  DR12;                         /*!< (@ 0x0000003C) Backup data register                                       */
  __IOM uint32_t  DR13;                         /*!< (@ 0x00000040) Backup data register                                       */
  __IOM uint32_t  DR14;                         /*!< (@ 0x00000044) Backup data register                                       */
  __IOM uint32_t  DR15;                         /*!< (@ 0x00000048) Backup data register                                       */
  __IOM uint32_t  DR16;                         /*!< (@ 0x0000004C) Backup data register                                       */
  __IOM uint32_t  DR17;                         /*!< (@ 0x00000050) Backup data register                                       */
  __IOM uint32_t  DR18;                         /*!< (@ 0x00000054) Backup data register                                       */
  __IOM uint32_t  DR19;                         /*!< (@ 0x00000058) Backup data register                                       */
  __IOM uint32_t  DR20;                         /*!< (@ 0x0000005C) Backup data register                                       */
  __IOM uint32_t  DR21;                         /*!< (@ 0x00000060) Backup data register                                       */
  __IM  uint32_t  RESERVED1[39];
  __IOM uint32_t  BDCR;                         /*!< (@ 0x00000100) Backup domain control register                             */
} BKP_Type;                                     /*!< Size = 260 (0x104)                                                        */



/* =========================================================================================================================== */
/* ================                                           AFIO                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief AFIO registers (AFIO)
  */

typedef struct {                                /*!< (@ 0x40001400) AFIO Structure                                             */
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  EXTICR1;                      /*!< (@ 0x00000008) External interrupt configuration register 1                */
  __IOM uint32_t  EXTICR2;                      /*!< (@ 0x0000000C) External interrupt configuration register 2                */
  __IOM uint32_t  EXTICR3;                      /*!< (@ 0x00000010) External interrupt configuration register 3                */
  __IOM uint32_t  EXTICR4;                      /*!< (@ 0x00000014) External interrupt configuration register 4                */
} AFIO_Type;                                    /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPIOA                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose and alternate-function I/O (GPIOA)
  */

typedef struct {                                /*!< (@ 0x40000000) GPIOA Structure                                            */
  __IOM uint32_t  MODER;                        /*!< (@ 0x00000000) GPIO port mode register                                    */
  __IOM uint32_t  OTYPER;                       /*!< (@ 0x00000004) GPIO port output type register                             */
  __IOM uint32_t  OSPEEDR;                      /*!< (@ 0x00000008) GPIO port output speed register                            */
  __IOM uint32_t  PUPDR;                        /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register                       */
  __IM  uint32_t  IDR;                          /*!< (@ 0x00000010) GPIO port input data register                              */
  __IOM uint32_t  ODR;                          /*!< (@ 0x00000014) GPIO port output data register                             */
  __OM  uint32_t  BSRR;                         /*!< (@ 0x00000018) GPIO port bit set/reset register                           */
  __IOM uint32_t  LCKR;                         /*!< (@ 0x0000001C) GPIO port configuration lock register                      */
  __IOM uint32_t  AFRL;                         /*!< (@ 0x00000020) GPIO alternate function low register                       */
  __IOM uint32_t  AFRH;                         /*!< (@ 0x00000024) GPIO alternate function high register                      */
  __IOM uint32_t  SMIT;                         /*!< (@ 0x00000028) GPIO Port Schmitt Register                                 */
  __IOM uint32_t  CURRENT;                      /*!< (@ 0x0000002C) GPIO Port driver register                                  */
  __IOM uint32_t  CFGMSK;                       /*!< (@ 0x00000030) GPIO Port configuration auxiliary register                 */
} GPIOA_Type;                                   /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPIOB                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose and alternate-function I/O (GPIOB)
  */

typedef struct {                                /*!< (@ 0x40000400) GPIOB Structure                                            */
  __IOM uint32_t  MODER;                        /*!< (@ 0x00000000) GPIO port mode register                                    */
  __IOM uint32_t  OTYPER;                       /*!< (@ 0x00000004) GPIO port output type register                             */
  __IOM uint32_t  OSPEEDR;                      /*!< (@ 0x00000008) GPIO port output speed register                            */
  __IOM uint32_t  PUPDR;                        /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register                       */
  __IM  uint32_t  IDR;                          /*!< (@ 0x00000010) GPIO port input data register                              */
  __IOM uint32_t  ODR;                          /*!< (@ 0x00000014) GPIO port output data register                             */
  __OM  uint32_t  BSRR;                         /*!< (@ 0x00000018) GPIO port bit set/reset register                           */
  __IOM uint32_t  LCKR;                         /*!< (@ 0x0000001C) GPIO port configuration lock register                      */
  __IOM uint32_t  AFRL;                         /*!< (@ 0x00000020) GPIO alternate function low register                       */
  __IOM uint32_t  AFRH;                         /*!< (@ 0x00000024) GPIO alternate function high register                      */
  __IOM uint32_t  SMIT;                         /*!< (@ 0x00000028) GPIO Port Schmitt Register                                 */
  __IOM uint32_t  CURRENT;                      /*!< (@ 0x0000002C) GPIO Port driver register                                  */
  __IOM uint32_t  CFGMSK;                       /*!< (@ 0x00000030) GPIO Port configuration auxiliary register                 */
} GPIOB_Type;                                   /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPIOC                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose and alternate-function I/O (GPIOC)
  */

typedef struct {                                /*!< (@ 0x40000800) GPIOC Structure                                            */
  __IOM uint32_t  MODER;                        /*!< (@ 0x00000000) GPIO port mode register                                    */
  __IOM uint32_t  OTYPER;                       /*!< (@ 0x00000004) GPIO port output type register                             */
  __IOM uint32_t  OSPEEDR;                      /*!< (@ 0x00000008) GPIO port output speed register                            */
  __IOM uint32_t  PUPDR;                        /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register                       */
  __IM  uint32_t  IDR;                          /*!< (@ 0x00000010) GPIO port input data register                              */
  __IOM uint32_t  ODR;                          /*!< (@ 0x00000014) GPIO port output data register                             */
  __OM  uint32_t  BSRR;                         /*!< (@ 0x00000018) GPIO port bit set/reset register                           */
  __IOM uint32_t  LCKR;                         /*!< (@ 0x0000001C) GPIO port configuration lock register                      */
  __IOM uint32_t  AFRL;                         /*!< (@ 0x00000020) GPIO alternate function low register                       */
  __IOM uint32_t  AFRH;                         /*!< (@ 0x00000024) GPIO alternate function high register                      */
  __IOM uint32_t  SMIT;                         /*!< (@ 0x00000028) GPIO Port Schmitt Register                                 */
  __IOM uint32_t  CURRENT;                      /*!< (@ 0x0000002C) GPIO Port driver register                                  */
  __IOM uint32_t  CFGMSK;                       /*!< (@ 0x00000030) GPIO Port configuration auxiliary register                 */
} GPIOC_Type;                                   /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPIOD                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose and alternate-function I/O (GPIOD)
  */

typedef struct {                                /*!< (@ 0x40000C00) GPIOD Structure                                            */
  __IOM uint32_t  MODER;                        /*!< (@ 0x00000000) GPIO port mode register                                    */
  __IOM uint32_t  OTYPER;                       /*!< (@ 0x00000004) GPIO port output type register                             */
  __IOM uint32_t  OSPEEDR;                      /*!< (@ 0x00000008) GPIO port output speed register                            */
  __IOM uint32_t  PUPDR;                        /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register                       */
  __IM  uint32_t  IDR;                          /*!< (@ 0x00000010) GPIO port input data register                              */
  __IOM uint32_t  ODR;                          /*!< (@ 0x00000014) GPIO port output data register                             */
  __OM  uint32_t  BSRR;                         /*!< (@ 0x00000018) GPIO port bit set/reset register                           */
  __IOM uint32_t  LCKR;                         /*!< (@ 0x0000001C) GPIO port configuration lock register                      */
  __IOM uint32_t  AFRL;                         /*!< (@ 0x00000020) GPIO alternate function low register                       */
  __IOM uint32_t  AFRH;                         /*!< (@ 0x00000024) GPIO alternate function high register                      */
  __IOM uint32_t  SMIT;                         /*!< (@ 0x00000028) GPIO Port Schmitt Register                                 */
  __IOM uint32_t  CURRENT;                      /*!< (@ 0x0000002C) GPIO Port driver register                                  */
  __IOM uint32_t  CFGMSK;                       /*!< (@ 0x00000030) GPIO Port configuration auxiliary register                 */
} GPIOD_Type;                                   /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                            SYS                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief System configuration (SYS)
  */

typedef struct {                                /*!< (@ 0x40016400) SYS Structure                                              */
  __IM  uint32_t  ID;                           /*!< (@ 0x00000000) ID Register                                                */
  __IM  uint32_t  MEMSZ;                        /*!< (@ 0x00000004) Memory control Register                                    */
  __IM  uint32_t  RESERVED;
  __IM  uint32_t  BTCR;                         /*!< (@ 0x0000000C) Security control Register                                  */
  __IM  uint32_t  MEMWEN;                       /*!< (@ 0x00000010) FLASH write protection register                            */
  __IM  uint32_t  SENDEV;                       /*!< (@ 0x00000014) Secondary development control Register                     */
  __IM  uint32_t  RSTCR;                        /*!< (@ 0x00000018) Reboot control Register                                    */
  __IM  uint32_t  IF4LCK;                       /*!< (@ 0x0000001C) Information block 4 protection register                    */
  __IM  uint32_t  IF5LCK;                       /*!< (@ 0x00000020) Information block 5 protection register                    */
  __IM  uint32_t  IF6LCK;                       /*!< (@ 0x00000024) Information block 6 protection register                    */
  __IM  uint32_t  IF7LCK;                       /*!< (@ 0x00000028) Information block 7 protection register                    */
  __IM  uint32_t  RESERVED1[2];
  __IM  uint32_t  BTSR;                         /*!< (@ 0x00000034) Boot control Register                                      */
} SYS_Type;                                     /*!< Size = 56 (0x38)                                                          */



/* =========================================================================================================================== */
/* ================                                            RCC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Reset and Clock Control (RCC)
  */

typedef struct {                                /*!< (@ 0x40010C00) RCC Structure                                              */
  __IOM uint32_t  PLLPRE;                       /*!< (@ 0x00000000) PLL pre-divider control register                           */
  __IOM uint32_t  PLLSRC;                       /*!< (@ 0x00000004) PLL clock source selection register                        */
  __IOM uint32_t  MAINCLKSRC;                   /*!< (@ 0x00000008) System clock source selection register                     */
  __OM  uint32_t  MAINCLKUEN;                   /*!< (@ 0x0000000C) System clock source update enable register                 */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  USBPRE;                       /*!< (@ 0x00000014) USB clock pre-divider control register                     */
  __IOM uint32_t  AHBPRE;                       /*!< (@ 0x00000018) AHB clock pre-divider register                             */
  __IOM uint32_t  APB1PRE;                      /*!< (@ 0x0000001C) APB1 clock pre-divider control register                    */
  __IOM uint32_t  APB2PRE;                      /*!< (@ 0x00000020) APB2 clock pre-divider control register                    */
  __IOM uint32_t  MCLKPRE;                      /*!< (@ 0x00000024) I2S MCLK clock pre-divider control register                */
  __IOM uint32_t  I2SPRE;                       /*!< (@ 0x00000028) I2S SCLK clock pre-divider control register                */
  __IOM uint32_t  MCLKSRC;                      /*!< (@ 0x0000002C) I2S MCLK clock source selection register                   */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  USBFIFOCLKSRC;                /*!< (@ 0x00000034) USB FIFO clock source selection register                   */
  __IOM uint32_t  MCOSEL;                       /*!< (@ 0x00000038) Clock output selection register                            */
  __IOM uint32_t  AHBENR0;                      /*!< (@ 0x0000003C) AHB peripherals clock enable register0                     */
  __IOM uint32_t  AHBENR1;                      /*!< (@ 0x00000040) AHB peripherals clock enable register1                     */
  __IOM uint32_t  AHBENR2;                      /*!< (@ 0x00000044) AHB peripherals clock enable register2                     */
  __IOM uint32_t  APB1ENR;                      /*!< (@ 0x00000048) APB1 peripherals clock enable register                     */
  __IOM uint32_t  APB2ENR;                      /*!< (@ 0x0000004C) APB2 peripherals clock enable register                     */
  __IM  uint32_t  RESERVED2[3];
  __IOM uint32_t  RNGCLKENR;                    /*!< (@ 0x0000005C) RNG clock enable register                                  */
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  IWDGCLKENR;                   /*!< (@ 0x00000064) IWDG clock enable register                                 */
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  USBCLKENR;                    /*!< (@ 0x0000006C) USB48MHz clock enable register                             */
  __IOM uint32_t  I2SCLKENR;                    /*!< (@ 0x00000070) I2S SCLK clock enable register                             */
  __IOM uint32_t  SPIS1CLKENR;                  /*!< (@ 0x00000074) SPIS1 clock enable register                                */
  __IOM uint32_t  SPIS2CLKENR;                  /*!< (@ 0x00000078) SPIS2 clock enable register                                */
  __IOM uint32_t  USBFIFOCLKENR;                /*!< (@ 0x0000007C) USB FIFO clock enable register                             */
  __IM  uint32_t  RESERVED5[2];
  __IOM uint32_t  AHBRSTR1;                     /*!< (@ 0x00000088) AHB peripheral reset register1                             */
  __IM  uint32_t  RESERVED6;
  __IOM uint32_t  APB1RSTR;                     /*!< (@ 0x00000090) APB1 peripheral reset register                             */
  __IOM uint32_t  APB2RSTR;                     /*!< (@ 0x00000094) APB2 peripheral reset register                             */
  __IM  uint32_t  RESERVED7[8];
  __IOM uint32_t  I2SCLKRSTR;                   /*!< (@ 0x000000B8) I2S SCLK reset register                                    */
  __IM  uint32_t  RESERVED8[3];
  __IOM uint32_t  CLRRSTSTAT;                   /*!< (@ 0x000000C8) Reset flag clear register                                  */
  __IM  uint32_t  RESERVED9[2];
  __IOM uint32_t  BDRSTR;                       /*!< (@ 0x000000D4) Battery domain reset register                              */
  __IOM uint32_t  LSI2RTCENR;                   /*!< (@ 0x000000D8) LSI battery domain clock enable register                   */
  __IOM uint32_t  HSE2RTCENR;                   /*!< (@ 0x000000DC) HSE clock 128-divider enable register                      */
  __IM  uint32_t  RESERVED10[8];
  __IM  uint32_t  RSTSTAT;                      /*!< (@ 0x00000100) Reset flag register                                        */
} RCC_Type;                                     /*!< Size = 260 (0x104)                                                        */



/* =========================================================================================================================== */
/* ================                                           EXTI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Interrupt/event controller (EXTI)
  */

typedef struct {                                /*!< (@ 0x40001800) EXTI Structure                                             */
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000000) Interrupt enable register                                  */
  __IOM uint32_t  EMR;                          /*!< (@ 0x00000004) Event enable register                                      */
  __IOM uint32_t  RTSR;                         /*!< (@ 0x00000008) Rising edge trigger enable register                        */
  __IOM uint32_t  FTSR;                         /*!< (@ 0x0000000C) Falling edge trigger enable register                       */
  __IOM uint32_t  SWIER;                        /*!< (@ 0x00000010) Software interrupt event register                          */
  __IOM uint32_t  PR;                           /*!< (@ 0x00000014) Pending register                                           */
} EXTI_Type;                                    /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           ANCTL                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Analog control (ANCTL)
  */

typedef struct {                                /*!< (@ 0x40010400) ANCTL Structure                                            */
  __IM  uint32_t  RESERVED[7];
  __IOM uint32_t  BGCR2;                        /*!< (@ 0x0000001C) BG control SFR2                                            */
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  MHSIENR;                      /*!< (@ 0x0000002C) MHSI enable SFR                                            */
  __IM  uint32_t  MHSISR;                       /*!< (@ 0x00000030) MHSI enable SFR                                            */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  FHSIENR;                      /*!< (@ 0x00000038) FHSI enable SFR                                            */
  __IM  uint32_t  FHSISR;                       /*!< (@ 0x0000003C) FHSI Status SFR                                            */
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  LSIENR;                       /*!< (@ 0x00000044) LSI enable SFR                                             */
  __IM  uint32_t  LSISR;                        /*!< (@ 0x00000048) LSI Status SFR                                             */
  __IOM uint32_t  HSECR0;                       /*!< (@ 0x0000004C) HSE control SFR 0                                          */
  __IOM uint32_t  HSECR1;                       /*!< (@ 0x00000050) HSE control SFR 1                                          */
  __IM  uint32_t  RESERVED4;
  __IM  uint32_t  HSESR;                        /*!< (@ 0x00000058) HSE Status SFR                                             */
  __IM  uint32_t  RESERVED5[6];
  __IOM uint32_t  PLLCR;                        /*!< (@ 0x00000074) PLL control SFR                                            */
  __IOM uint32_t  PLLENR;                       /*!< (@ 0x00000078) PLL enable control                                         */
  __IM  uint32_t  PLLSR;                        /*!< (@ 0x0000007C) PLL Status SFR                                             */
  __IOM uint32_t  PVDCR;                        /*!< (@ 0x00000080) PVD control SFR                                            */
  __IOM uint32_t  PVDENR;                       /*!< (@ 0x00000084) PVD enable SFR                                             */
  __IM  uint32_t  RESERVED6;
  __IOM uint32_t  SARENR;                       /*!< (@ 0x0000008C) SARADC enable SFR                                          */
  __IM  uint32_t  RESERVED7;
  __IOM uint32_t  PORCR;                        /*!< (@ 0x00000094) POR control SFR                                            */
  __IOM uint32_t  CMPACR;                       /*!< (@ 0x00000098) CMPA control SFR                                           */
  __IOM uint32_t  CMPBCR;                       /*!< (@ 0x0000009C) CMPB control SFR                                           */
  __IM  uint32_t  ISR;                          /*!< (@ 0x000000A0) INT Status SFR                                             */
  __IOM uint32_t  IER;                          /*!< (@ 0x000000A4) INT enable SFR                                             */
  __IOM uint32_t  ICR;                          /*!< (@ 0x000000A8) INT clear SFR                                              */
  __IM  uint32_t  CMPASR;                       /*!< (@ 0x000000AC) CMPA Status SFR                                            */
  __IM  uint32_t  CMPBSR;                       /*!< (@ 0x000000B0) CMPB Status SFR                                            */
  __IOM uint32_t  CSSENR;                       /*!< (@ 0x000000B4) CSS enable SFR                                             */
  __IOM uint32_t  CSSCR;                        /*!< (@ 0x000000B8) CSS configuration SFR                                      */
} ANCTL_Type;                                   /*!< Size = 188 (0xbc)                                                         */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define CRC_BASE                    0x40014800UL
#define RNG_BASE                    0x4000B800UL
#define PWR_BASE                    0x40010000UL
#define BKP_BASE                    0x40015C00UL
#define AFIO_BASE                   0x40001400UL
#define GPIOA_BASE                  0x40000000UL
#define GPIOB_BASE                  0x40000400UL
#define GPIOC_BASE                  0x40000800UL
#define GPIOD_BASE                  0x40000C00UL
#define SYS_BASE                    0x40016400UL
#define RCC_BASE                    0x40010C00UL
#define EXTI_BASE                   0x40001800UL
#define ANCTL_BASE                  0x40010400UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define CRC                         ((CRC_Type*)               CRC_BASE)
#define RNG                         ((RNG_Type*)               RNG_BASE)
#define PWR                         ((PWR_Type*)               PWR_BASE)
#define BKP                         ((BKP_Type*)               BKP_BASE)
#define AFIO                        ((AFIO_Type*)              AFIO_BASE)
#define GPIOA                       ((GPIOA_Type*)             GPIOA_BASE)
#define GPIOB                       ((GPIOB_Type*)             GPIOB_BASE)
#define GPIOC                       ((GPIOC_Type*)             GPIOC_BASE)
#define GPIOD                       ((GPIOD_Type*)             GPIOD_BASE)
#define SYS                         ((SYS_Type*)               SYS_BASE)
#define RCC                         ((RCC_Type*)               RCC_BASE)
#define EXTI                        ((EXTI_Type*)              EXTI_BASE)
#define ANCTL                       ((ANCTL_Type*)             ANCTL_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


#ifdef __cplusplus
}
#endif

#endif /* WB32F10X_H */


/** @} */ /* End of group WB32F10x */

/** @} */ /* End of group  */
